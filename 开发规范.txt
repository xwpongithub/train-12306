如果接口返回值为String，必须用JsonResult进行包裹

缓存击穿
    缓存击穿指的是一个热点数据突然失效或者被清除，而在失效的瞬间，
    有大量请求同时访问该数据。这导致这些请求都穿透缓存，
    直接访问数据存储，造成数据库压力激增。

解决方案:
    采用互斥锁或者分布式锁，确保只有一个线程能够重新加载缓存数据。另外，可以使用一些手段，
    比如在缓存中设置短暂的过期时间，并在过期后异步更新缓存，避免大量请求同时访问数据库。

缓存穿透
    指的是一个请求查询一个在缓存中不存在的数据，
    而且该数据也不存在于数据存储中。由于缓存中没有相应的数据，
    每次请求都会穿透缓存直接访问数据存储，导致大量的请求直接落在数据库上，
    影响性能。
解决方案:
     可以在缓存中存储空值（null或者特殊标记），
     表示该数据在数据库中不存在，从而防止对不存在的数据进行不必要的数据库查询。
     还可以使用布隆过滤器等数据结构来预先过滤掉无效的请求。

缓存雪崩
    缓存雪崩是另一种与缓存相关的问题，它发生在大量缓存数据在同一时间失效或者被清除，导致大量的请求直接落在数据存储上，造成数据库压力激增。
解决方案：
    不同的过期时间： 为不同的缓存数据设置不同的过期时间，避免同时失效。
    永不过期和平滑过期： 对于一些热点数据，可以考虑设置永不过期，或者采用平滑过期策略，即在不同时间点失效不同的数据，分散请求。
    热点数据手动刷新： 对于热点数据，可以通过手动刷新或者异步刷新的方式，避免大量请求同时访问失效的数据。
    多级缓存： 使用多级缓存体系，减少单点故障的影响，即使一个缓存层发生雪崩，其他缓存层还能提供服务。


Seata
  AT模式 默认，简单，需要增加undo_log表生成反向sql，性能高
  特点：回滚后，原来没数据的现在还是没数据
  TCC模式 try confirm/cancel 三个阶段的代码都必须自己实现，Seata只负责调度
  特点：对业务代码侵入性较强，必要时可能还要修改数据库
  SAGA模式，长事务解决方案，需要成需要自己编写两端代码（AT模式不需要写第二阶段）
  特点：基于状态机实现，需要一个json文件，可异步执行
  XA模式：由X/Open组织提出的分布式事务处理规范，基于数据库的XA协议来实现2PC又称为XA方案，
  适用于强一致性的场景，比如银行，金融等
  特点：需要数据库本身支持XA协议，可以跨数据库
